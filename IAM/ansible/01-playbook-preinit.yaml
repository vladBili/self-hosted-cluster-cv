---
- name: Set up SSH conf
  hosts: localhost
  vars:
    ssh_config_path: "~/.ssh/config"
    ssh_key_path: "{{ directory }}/IAM/ansible/env/{{ department }}/keys/key.pem"
  tasks:
    - name: Add SSH config block for private nodes
      ansible.builtin.blockinfile:
        path: "{{ ssh_config_path }}"
        create: true
        block: |
          {% for host in groups['bastion'] %}
          Host {{ hostvars[host]['inventory_hostname'] }}
            HostName {{ hostvars[host]['ansible_host'] }}
            User ec2-user
            IdentityFile {{ ssh_key_path }}

          {% endfor %}

          {% for host in groups['private'] %}
          Host {{ hostvars[host]['inventory_hostname'] }}
            HostName {{ hostvars[host]['ansible_host'] }}
            User ec2-user
            IdentityFile {{ ssh_key_path }}
            ProxyJump {{ groups['bastion'][0] }}

          {% endfor %}

- name: Add all hosts to known_hosts
  hosts: localhost
  tasks:
    - name: Scan and add all host keys
      ansible.builtin.known_hosts:
        name: "{{ hostvars[item]['ansible_host'] }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -H ' + (hostvars[item]['ansible_host'])) }}"
        path: "~/.ssh/known_hosts"
      loop: "{{ groups['bastion'] }}"

- name: Set up OpenVPN
  hosts: bastion
  become: true
  gather_facts: true
  vars:
    OpenVPN_dir: /tmp/openvpn/easyrsa3
  tasks:
    - name: Install packages 2
      ansible.builtin.yum:
        name:
          - git
          - openssl
        state: present
        update_cache: yes

    - name: Create temporary folder for OpenVPN
      ansible.builtin.file:
        path: /tmp/openvpn
        state: directory

    - name: Clone the OpenVPN easy-rsa repo
      ansible.builtin.git:
        repo: https://github.com/OpenVPN/easy-rsa.git
        dest: /tmp/openvpn

    - name: Initialize Easy-RSA PKI
      ansible.builtin.command: ./easyrsa init-pki
      args:
        chdir: "{{ OpenVPN_dir }}"

    - name: Build a new certificate authority (CA)
      ansible.builtin.command: ./easyrsa build-ca nopass
      args:
        chdir: "{{ OpenVPN_dir }}"
      environment:
        EASYRSA_BATCH: "1"
        EASYRSA_REQ_CN: "My-VPN-CA"

    - name: Generate the server certificate and key
      ansible.builtin.command: ./easyrsa --san=DNS:server build-server-full server nopass
      args:
        chdir: "{{ OpenVPN_dir }}"
      environment:
        EASYRSA_BATCH: "1"

    - name: Generate the client certificate and key
      ansible.builtin.command: ./easyrsa build-client-full client1.domain.tld nopass
      args:
        chdir: "{{ OpenVPN_dir }}"
      environment:
        EASYRSA_BATCH: "1"

    - name: Create folder for OpenVPN
      ansible.builtin.file:
        path: /etc/openvpn/server
        state: directory

    - name: Copy server.conf
      ansible.builtin.copy:
        src: "{{ directory }}/IAM/openvpn/{{ department }}/templates/server.conf"
        dest: /etc/openvpn/server/server.conf

    - name: Copy ca.crt
      ansible.builtin.copy:
        src: /tmp/openvpn/easyrsa3/pki/ca.crt
        dest: /etc/openvpn/server/ca.crt
        remote_src: true

    - name: Copy server.crt
      ansible.builtin.copy:
        src: /tmp/openvpn/easyrsa3/pki/issued/server.crt
        dest: /etc/openvpn/server/server.crt
        remote_src: true

    - name: Copy server.key
      ansible.builtin.copy:
        src: /tmp/openvpn/easyrsa3/pki/private/server.key
        dest: /etc/openvpn/server/server.key
        remote_src: true
        mode: "600"

    - name: Copy client1.domain.tld.crt
      ansible.builtin.copy:
        src: /tmp/openvpn/easyrsa3/pki/issued/client1.domain.tld.crt
        dest: /etc/openvpn/server/client1.domain.tld.crt
        remote_src: true

    - name: Copy client1.domain.tld.key
      ansible.builtin.copy:
        src: /tmp/openvpn/easyrsa3/pki/private/client1.domain.tld.key
        dest: /etc/openvpn/server/client1.domain.tld.key
        remote_src: true

    - name: Copy dh.pem
      ansible.builtin.command:
        cmd: openssl dhparam -out /etc/openvpn/server/dh.pem 2048

    - name: Enable IP forwarding temporarily
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: yes

    - name: Ensure net.ipv4.ip_forward is enabled on boot
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        regexp: '^net\.ipv4\.ip_forward'
        line: "net.ipv4.ip_forward = 1"

    - name: Ensure nftables is installed
      ansible.builtin.yum:
        name: nftables
        state: present

    - name: Enable and start nftables
      ansible.builtin.systemd:
        name: nftables
        enabled: true
        state: started

    - name: Create NAT table if not exists
      ansible.builtin.command: nft add table ip nat
      ignore_errors: true

    - name: Create postrouting chain if not exists
      ansible.builtin.command: >
        nft add chain ip nat postrouting { type nat hook postrouting priority 100 \; }
      ignore_errors: true

    - name: Add NAT masquerade rule
      ansible.builtin.command: >
        nft add rule ip nat postrouting ip saddr 10.0.5.0/24 oif {{ ansible_default_ipv4.interface }} masquerade
      ignore_errors: true

    - name: Install OpenVPN
      ansible.builtin.yum:
        name: openvpn
        state: present
        update_cache: yes

    - name: Start OpenVPN server
      ansible.builtin.systemd:
        name: openvpn-server@server
        state: started
        enabled: true

    - name: Fetch CA cert
      ansible.builtin.fetch:
        src: /etc/openvpn/server/ca.crt
        dest: "{{ directory }}/IAM/openvpn/{{ department }}/configuration/ca.crt"
        flat: yes

    - name: Fetch Client cert
      ansible.builtin.fetch:
        src: /tmp/openvpn/easyrsa3/pki/issued/client1.domain.tld.crt
        dest: "{{ directory }}/IAM/openvpn/{{ department }}/configuration/client1.domain.tld.crt"
        flat: yes

    - name: Fetch Client key
      ansible.builtin.fetch:
        src: /tmp/openvpn/easyrsa3/pki/private/client1.domain.tld.key
        dest: "{{ directory }}/IAM/openvpn/{{ department }}/configuration/client1.domain.tld.key"
        flat: yes

- name: Create client ovpn
  hosts: localhost
  tasks:
    - name: Read CA cert
      ansible.builtin.slurp:
        src: "{{ directory }}/IAM/openvpn/{{ department }}/configuration/ca.crt"
      register: ca

    - name: Read client cert
      ansible.builtin.slurp:
        src: "{{ directory }}/IAM/openvpn/{{ department }}/configuration/client1.domain.tld.crt"
      register: cert

    - name: Read client key
      ansible.builtin.slurp:
        src: "{{ directory }}/IAM/openvpn/{{ department }}/configuration/client1.domain.tld.key"
      register: key

    - name: Create client OVPN config
      ansible.builtin.template:
        src: "{{ directory }}/IAM/openvpn/{{ department }}/templates/client.ovpn.j2"
        dest: "{{ directory }}/IAM/openvpn/{{ department }}/configuration/client.ovpn"
      vars:
        ca_cert: "{{ ca.content | b64decode }}"
        client_cert: "{{ cert.content | b64decode }}"
        client_key: "{{ key.content | b64decode }}"

    - name: Check current user
      ansible.builtin.command: whoami
      register: current_user

    - name: Run openvpn in daemon mode
      ansible.builtin.command:
        cmd: openvpn --config "{{ directory }}/IAM/openvpn/{{ department }}/configuration/client.ovpn" --daemon
      become: yes
      become_user: "{{ current_user.stdout }}"
